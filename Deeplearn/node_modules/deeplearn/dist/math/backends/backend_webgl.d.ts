import { Conv2DInfo } from '../conv_util';
import { NDArrayMath } from '../math';
import { Array1D, Array2D, Array3D, Array4D, DataTypes, NDArray, Scalar } from '../ndarray';
import { SumTypes } from '../types';
import { MathBackend, MatrixOrientation } from './backend';
import { GPGPUContext } from './webgl/gpgpu_context';
import { TextureManager } from './webgl/texture_manager';
export declare class MathBackendWebGL implements MathBackend {
    private gpgpu;
    private textureManager;
    private binaryCache;
    private gpgpuCreatedLocally;
    constructor(gpgpu?: GPGPUContext);
    getGPGPUContext(): GPGPUContext;
    clone<G extends keyof DataTypes, T extends NDArray<G>>(a: T): T;
    slice1D(input: Array1D, begin: number, size: number): Array1D;
    slice2D(input: Array2D, begin: [number, number], size: [number, number]): Array2D;
    slice3D(input: Array3D, begin: [number, number, number], size: [number, number, number]): Array3D;
    slice4D(input: Array4D, begin: [number, number, number, number], size: [number, number, number, number]): Array4D;
    copy2D(source: Array2D, sourceBeginRowCol: [number, number], sourceSizeRowCol: [number, number], dest: Array2D, destBeginRowCol: [number, number], destSizeRowCol: [number, number]): void;
    concat1D(a: Array1D, b: Array1D): Array1D;
    concat2D(a: Array2D, b: Array2D, axis: number): Array2D;
    concat3D(x1: Array3D, x2: Array3D, axis: number): Array3D;
    concat4D(x1: Array4D, x2: Array4D, axis: number): Array4D;
    scaledArrayAdd<T extends NDArray>(c1: Scalar, a: T, c2: Scalar, b: T): T;
    neg<T extends NDArray>(a: T): T;
    private makeOutputArray<G, T>(shape, dtype);
    private compileAndRun<T, K>(program, inputs, output?, customSetup?);
    matMul(a: Array2D, b: Array2D, aOrientation: MatrixOrientation, bOrientation: MatrixOrientation): Array2D;
    multiply<T extends NDArray>(a: T, b: T): T;
    batchNormalization2D(x: Array2D, mean: Array2D | Array1D, variance: Array2D | Array1D, varianceEpsilon: number, scale?: Array2D | Array1D, offset?: Array2D | Array1D): Array2D;
    batchNormalization3D(x: Array3D, mean: Array3D | Array1D, variance: Array3D | Array1D, varianceEpsilon: number, scale?: Array3D | Array1D, offset?: Array3D | Array1D): Array3D;
    tile<D extends keyof DataTypes, T extends NDArray<D>>(a: T, reps: number[]): T;
    transpose<D extends keyof DataTypes, T extends NDArray<D>>(a: T, perm: number[]): T;
    private reduce<D>(a, reduceType, dtype);
    private argReduce(a, reduceType, bestIndicesA?);
    sum<T extends keyof DataTypes>(a: NDArray<T>, axes: number[]): NDArray<SumTypes[T]>;
    argMin(a: NDArray, axes: number[]): NDArray<'int32'>;
    argMax(a: NDArray, axes: number[]): NDArray<'int32'>;
    equal(x: NDArray, y: NDArray): NDArray<'bool'>;
    topKValues<D extends keyof DataTypes, T extends NDArray<D>>(ndarray: T, k: number): Array1D<D>;
    topKIndices(ndarray: NDArray, k: number): Array1D<'int32'>;
    min<G extends keyof DataTypes>(a: NDArray<G>, axes: number[]): NDArray<G>;
    max<G extends keyof DataTypes>(a: NDArray<G>, axes: number[]): NDArray<G>;
    divide(a: NDArray, b: NDArray): NDArray<'float32'>;
    add<T extends NDArray>(a: T, b: T): T;
    subtract<T extends NDArray>(a: T, b: T): T;
    ceil<T extends NDArray>(a: T): T;
    floor<T extends NDArray>(a: T): T;
    exp<T extends NDArray>(a: T): T;
    log<T extends NDArray>(a: T): T;
    sqrt<T extends NDArray>(a: T): T;
    square<T extends NDArray>(x: T): T;
    relu<T extends NDArray>(a: T): T;
    elu<T extends NDArray>(a: T): T;
    eluDer<T extends NDArray>(a: T): T;
    selu<T extends NDArray>(a: T): T;
    leakyRelu<T extends NDArray>(a: T, alpha: number): T;
    clip<T extends NDArray>(a: T, min: number, max: number): T;
    abs<T extends NDArray>(a: T): T;
    sigmoid<T extends NDArray>(a: T): T;
    sin<T extends NDArray>(a: T): T;
    cos<T extends NDArray>(a: T): T;
    tan<T extends NDArray>(a: T): T;
    asin<T extends NDArray>(a: T): T;
    acos<T extends NDArray>(a: T): T;
    atan<T extends NDArray>(a: T): T;
    sinh<T extends NDArray>(a: T): T;
    cosh<T extends NDArray>(a: T): T;
    tanh<T extends NDArray>(a: T): T;
    step<T extends NDArray>(a: T, alpha: number): T;
    conv2d(x: Array4D, filter: Array4D, bias: Array1D | null, convInfo: Conv2DInfo): Array4D;
    conv2dDerInput(dy: Array4D, filter: Array4D, convInfo: Conv2DInfo): Array4D;
    conv2dDerFilter(x: Array4D, dY: Array4D, convInfo: Conv2DInfo): Array4D;
    conv2dDerBias(dY: Array4D): Array1D;
    depthwiseConv2D(input: Array4D, filter: Array4D, convInfo: Conv2DInfo): Array4D;
    maxPool(x: Array4D, convInfo: Conv2DInfo): Array4D;
    minPool(x: Array4D, convInfo: Conv2DInfo): Array4D;
    avgPool(x: Array4D, convInfo: Conv2DInfo): Array4D;
    maxPoolBackprop(dy: Array4D, x: Array4D, convInfo: Conv2DInfo): Array4D;
    resizeBilinear3D(x: Array3D, newShape2D: [number, number], alignCorners: boolean): Array3D;
    multinomial(probs: Array2D, numSamples: number, seed: number): Array2D<'int32'>;
    oneHot(indices: Array1D, depth: number, onValue: number, offValue: number): Array2D;
    private getAndSaveBinary(key, getBinary);
    getTextureManager(): TextureManager;
    dispose(): void;
}
export declare class NDArrayMathGPU extends NDArrayMath {
    constructor(gpgpu?: GPGPUContext, safeMode?: boolean);
    getGPGPUContext(): GPGPUContext;
    getTextureManager(): TextureManager;
}
