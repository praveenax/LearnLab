import { MathBackend, MatrixOrientation } from './backends/backend';
import { Array1D, Array2D, Array3D, Array4D, DataTypes, NDArray, Scalar } from './ndarray';
import { SumTypes } from './types';
export declare type ScopeResultImmediate = void | NDArray | NDArray[] | {
    [key: string]: NDArray;
};
export declare type ScopeResult = ScopeResultImmediate | Promise<ScopeResultImmediate>;
export interface LSTMCell {
    (data: Array2D, c: Array2D, h: Array2D): [Array2D, Array2D];
}
export declare abstract class NDArrayMath {
    protected backend: MathBackend;
    private safeMode;
    private ndarrayScopes;
    private activeScope;
    private ndarraysToKeep;
    private activeScopeNDArraysToKeep;
    private debugMode;
    constructor(backend: MathBackend, safeMode: boolean);
    scope<T extends ScopeResult>(scopeFn: (keep: <D1 extends keyof DataTypes, T1 extends NDArray<D1>>(ndarray: T1) => T1, track: <D2 extends keyof DataTypes, T2 extends NDArray<D2>>(ndarray: T2) => T2) => T): T;
    enableDebugMode(): void;
    startScope(): void;
    private extractNDArraysFromScopeResult(result);
    endScope(result: ScopeResultImmediate): void;
    private isNDArrayDataInList(ndarray, ndarrayList);
    keep<T extends NDArray>(result: T): T;
    private checkForNaN(vals, dtype, name);
    track<G extends keyof DataTypes, T extends NDArray<G>>(result: T): T;
    dispose(): void;
    matMul(a: Array2D, b: Array2D, aOrientation?: MatrixOrientation, bOrientation?: MatrixOrientation): Array2D;
    private executeOp<G, T>(name, f);
    vectorTimesMatrix(v: Array1D, matrix: Array2D): Array1D;
    matrixTimesVector(matrix: Array2D, v: Array1D): Array1D;
    dotProduct(v1: Array1D, v2: Array1D): Scalar;
    outerProduct(v1: Array1D, v2: Array1D): Array2D;
    clone<T extends NDArray>(ndarray: T): T;
    reshape<T1 extends NDArray, T2 extends NDArray>(ndarray: T1, newShape: number[]): T2;
    slice1D(input: Array1D, begin: number, size: number): Array1D;
    slice2D(input: Array2D, begin: [number, number], size: [number, number]): Array2D;
    slice3D(input: Array3D, begin: [number, number, number], size: [number, number, number]): Array3D;
    slice4D(input: Array4D, begin: [number, number, number, number], size: [number, number, number, number]): Array4D;
    copy2D(source: Array2D, sourceBegin: [number, number], sourceSize: [number, number], dest: Array2D, destBegin: [number, number], destSize: [number, number]): void;
    concat1D(a: Array1D, b: Array1D): Array1D;
    concat2D(a: Array2D, b: Array2D, axis: number): Array2D;
    concat3D(ndarray1: Array3D, ndarray2: Array3D, axis: number): Array3D;
    concat4D(ndarray1: Array4D, ndarray2: Array4D, axis: number): Array4D;
    logSumExp(input: NDArray, axis?: number | number[], keepDims?: boolean): NDArray;
    sum<T extends keyof DataTypes>(input: NDArray<T>, axis?: number | number[], keepDims?: boolean): NDArray<SumTypes[T]>;
    mean(x: NDArray, axis?: number | number[], keepDims?: boolean): NDArray<'float32'>;
    argMin(input: NDArray, axis?: number): NDArray<'int32'>;
    argMax(input: NDArray, axis?: number): NDArray<'int32'>;
    argMaxEquals(x1: NDArray, x2: NDArray): Scalar<'bool'>;
    equal(x: NDArray, y: NDArray): NDArray<'bool'>;
    equalStrict<D extends keyof DataTypes, T extends NDArray<D>>(x: T, y: T): NDArray<'bool'>;
    topK(ndarray: NDArray, k: number): {
        values: Array1D;
        indices: Array1D;
    };
    min<G extends keyof DataTypes>(input: NDArray<G>, axis?: number | number[], keepDims?: boolean): NDArray<G>;
    max<G extends keyof DataTypes>(input: NDArray<G>, axis?: number | number[], keepDims?: boolean): NDArray<G>;
    softmax<T extends NDArray>(logits: T, dim?: number): T;
    switchDim<T extends NDArray>(a: T, newDim: number[]): T;
    tile<D extends keyof DataTypes, T extends NDArray<D>>(a: T, reps: number[]): T;
    transpose<D extends keyof DataTypes, T extends NDArray<D>>(a: T, perm?: number[]): T;
    scalarPlusArray<T extends NDArray>(c: Scalar, a: T): T;
    scalarMinusArray<T extends NDArray>(c: Scalar, a: T): T;
    arrayMinusScalar<T extends NDArray>(a: T, c: Scalar): T;
    neg<T extends NDArray>(a: T): T;
    add<G extends keyof DataTypes>(a: NDArray<G>, b: NDArray<G>): NDArray<G>;
    addStrict<D extends keyof DataTypes, T extends NDArray<D>>(a: T, b: T): T;
    subtract<G extends keyof DataTypes>(a: NDArray<G>, b: NDArray<G>): NDArray<G>;
    sub<G extends keyof DataTypes>(a: NDArray<G>, b: NDArray<G>): NDArray<G>;
    subStrict<D extends keyof DataTypes, T extends NDArray<D>>(a: T, b: T): T;
    multiply(a: NDArray, b: NDArray): NDArray;
    elementWiseMul<T extends NDArray>(a: T, b: T): T;
    multiplyStrict<T extends NDArray>(a: T, b: T): T;
    divide(a: NDArray, b: NDArray): NDArray<'float32'>;
    divideStrict<T extends NDArray>(a: T, b: T): T;
    scalarDividedByArray<T extends NDArray>(c: Scalar, a: T): T;
    arrayDividedByScalar<T extends NDArray>(a: T, c: Scalar): T;
    ceil<T extends NDArray>(ndarray: T): T;
    floor<T extends NDArray>(ndarray: T): T;
    exp<T extends NDArray>(ndarray: T): T;
    log<T extends NDArray>(ndarray: T): T;
    sqrt<T extends NDArray>(ndarray: T): T;
    square<T extends NDArray>(x: T): T;
    abs<T extends NDArray>(ndarray: T): T;
    clip<T extends NDArray>(ndarray: T, min: number, max: number): T;
    relu<T extends NDArray>(ndarray: T): T;
    elu<T extends NDArray>(ndarray: T): T;
    eluDer<T extends NDArray>(ndarray: T): T;
    selu<T extends NDArray>(ndarray: T): T;
    leakyRelu<T extends NDArray>(ndarray: T, alpha?: number): T;
    sigmoid<T extends NDArray>(ndarray: T): T;
    sin<T extends NDArray>(ndarray: T): T;
    cos<T extends NDArray>(ndarray: T): T;
    tan<T extends NDArray>(ndarray: T): T;
    asin<T extends NDArray>(ndarray: T): T;
    acos<T extends NDArray>(ndarray: T): T;
    atan<T extends NDArray>(ndarray: T): T;
    sinh<T extends NDArray>(ndarray: T): T;
    cosh<T extends NDArray>(ndarray: T): T;
    tanh<T extends NDArray>(ndarray: T): T;
    step<T extends NDArray>(ndarray: T, alpha?: number): T;
    scaledArrayAdd<T extends NDArray>(c1: Scalar, a: T, c2: Scalar, b: T): T;
    scalarTimesArray<T extends NDArray>(c: Scalar, a: T): T;
    elementWiseMulBroadcast(a: Array2D, b: Array2D): Array2D;
    conv2d<T extends NDArray>(input: T, filter: Array4D, bias: Array1D | null, strides: [number, number] | number, pad: 'valid' | 'same' | number): T;
    conv2dDerInput<T extends NDArray>(inShape: [number, number, number, number] | [number, number, number], dy: T, filter: Array4D, strides: [number, number] | number, pad: 'valid' | 'same' | number): T;
    conv2dDerBias(dy: Array3D | Array4D): Array1D;
    conv2dDerFilter<T extends NDArray>(input: T, dy: T, filterShape: [number, number, number, number], strides: [number, number] | number, pad: 'valid' | 'same' | number): Array4D;
    conv2dTranspose<T extends NDArray>(x: T, filter: Array4D, outputShape: [number, number, number, number] | [number, number, number], strides: [number, number] | number, pad: 'valid' | 'same' | number): T;
    depthwiseConv2D<T extends NDArray>(input: T, filter: Array4D, strides: [number, number] | number, pad: 'valid' | 'same' | number, rates?: [number, number] | number): T;
    maxPool<T extends NDArray>(input: T, filterSize: [number, number] | number, strides: [number, number] | number, pad: 'valid' | 'same' | number): T;
    maxPoolBackprop<T extends NDArray>(dy: T, input: T, filterSize: [number, number] | number, strides: [number, number] | number, pad: 'valid' | 'same' | number): T;
    minPool<T extends NDArray>(input: T, filterSize: [number, number] | number, strides: [number, number] | number, pad: 'valid' | 'same' | number): T;
    avgPool<T extends NDArray>(input: T, filterSize: [number, number] | number, strides: [number, number] | number, pad: 'valid' | 'same' | number): T;
    resizeBilinear3D(x: Array3D, newShape2D: [number, number], alignCorners?: boolean): Array3D;
    batchNormalization2D(x: Array2D, mean: Array2D | Array1D, variance: Array2D | Array1D, varianceEpsilon?: number, scale?: Array2D | Array1D, offset?: Array2D | Array1D): Array2D;
    batchNormalization3D(x: Array3D, mean: Array3D | Array1D, variance: Array3D | Array1D, varianceEpsilon?: number, scale?: Array3D | Array1D, offset?: Array3D | Array1D): Array3D;
    multiRNNCell(lstmCells: LSTMCell[], data: Array2D, c: Array2D[], h: Array2D[]): [Array2D[], Array2D[]];
    basicLSTMCell(forgetBias: Scalar, lstmKernel: Array2D, lstmBias: Array1D, data: Array2D, c: Array2D, h: Array2D): [Array2D, Array2D];
    multinomial(probabilities: Array1D | Array2D, numSamples: number, seed?: number): Array1D<'int32'> | Array2D<'int32'>;
    oneHot(indices: Array1D, depth: number, onValue?: number, offValue?: number): Array2D;
    moments(x: NDArray, axis?: number | number[], keepDims?: boolean): {
        mean: NDArray<'float32'>;
        variance: NDArray<'float32'>;
    };
}
